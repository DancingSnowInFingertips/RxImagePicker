apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        applicationId "com.qingmei2.sample"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

final boolean useRemote = true
final String substituteReason = 'we work with the unreleased development version.'

final String rxImagePickerRemote = "com.github.qingmei2:rximagepicker:$rootProject.ext.android.versionName"
final String rxImagePickerUiRemote = "com.github.qingmei2:rximagepicker_support:$rootProject.ext.android.versionName"
final String rxImagePickerZhihuRemote = "com.github.qingmei2:rximagepicker_support_zhihu:$rootProject.ext.android.versionName"
final String rxImagePickerWechatRemote = "com.github.qingmei2:rximagepicker_support_wechat:$rootProject.ext.android.versionName"

configurations{
    all {
        resolutionStrategy.dependencySubstitution {
            if (!useRemote) {
                substitute module(rxImagePickerRemote) because substituteReason with project(':rximagepicker')
                substitute module(rxImagePickerUiRemote) because substituteReason with project(':rximagepicker_support')
                substitute module(rxImagePickerZhihuRemote) because substituteReason with project(':rximagepicker_support_wechat')
                substitute module(rxImagePickerWechatRemote) because substituteReason with project(':rximagepicker_support_zhihu')
            }
        }
    }
    compile.exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
}

dependencies {
    implementation rootProject.ext.dependencies['kotlin-android']
    implementation rootProject.ext.dependencies['appcompat']
    implementation rootProject.ext.dependencies['design']

    implementation rootProject.ext.dependencies['glide']
    kapt rootProject.ext.dependencies['glide-compiler']

    androidTestImplementation rootProject.ext.dependencies['espresso-core']
    androidTestImplementation rootProject.ext.dependencies['espresso-contrib']
    androidTestImplementation rootProject.ext.dependencies['espresso-intent']
    androidTestImplementation rootProject.ext.dependencies['test-runner']
    androidTestImplementation rootProject.ext.dependencies['test-rules']

    implementation rxImagePickerRemote
    implementation rxImagePickerUiRemote
    implementation rxImagePickerZhihuRemote
    implementation rxImagePickerWechatRemote

    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["junit"]
}